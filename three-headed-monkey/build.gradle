buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.12.0'
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.3'
//        classpath 'com.github.jcandksolutions.gradle:android-unit-test:1.0.+'
        classpath 'org.robolectric:robolectric-gradle-plugin:0.11.+'
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.10.+'
    }
}

apply plugin: 'android-sdk-manager'
apply plugin: 'android'
apply plugin: 'android-apt'
apply plugin: 'robolectric'


def getVersionCode = { ->
    def code = project.hasProperty('versionCode') ? versionCode.toInteger() : -1
    println "VersionCode is set to $code"
    return code
}

def getVersionName = { ->
    def code = getVersionCode
    def versionName = "0.1.$code"
    println "VersionName is set to $versionName"
    return versionName
}

android {
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
    }

    compileSdkVersion 19
    buildToolsVersion "19.1.0"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 19
        applicationId "net.three_headed_monkey"
        versionCode getVersionCode()
        versionName getVersionName()
        testApplicationId "net.three_headed_monkey.test"
        testInstrumentationRunner "pl.polidea.instrumentation.PolideaInstrumentationTestRunner"
    }

    buildTypes {
        debug {
            versionNameSuffix "-debug"
        }
    }

    signingConfigs {
        debug {
            storeFile file(getRootDir().toString() + "/.debug-keystore")
            storePassword "changeit"
            keyPassword "changeit"
            keyAlias "AndroidDebug"
        }
    }

    lintOptions {
        abortOnError false
    }

}

robolectric {
    // configure the set of classes for JUnit tests
    include '**/*Test.class'
    exclude '**/test/**/*.class'

    // configure max heap size of the test JVM
    maxHeapSize = "2048m"
}

//apply plugin: 'android-unit-test'

repositories {
    mavenCentral()
}

ext.androidAnnotationsVersion = '3.0.+';


dependencies {
//==================== Android Annotations =========
    apt "org.androidannotations:androidannotations:${androidAnnotationsVersion}"
    compile "org.androidannotations:androidannotations-api:${androidAnnotationsVersion}"
//===================================================
    compile "com.google.code.gson:gson:2.2.4"
    compile "com.android.support:support-v4:19.0.+"
    compile 'org.apache.directory.studio:org.apache.commons.codec:1.8'
//==================== Robolectric ==================
    androidTestCompile 'org.hamcrest:hamcrest-integration:1.3',
            'org.hamcrest:hamcrest-core:1.3',
            'org.hamcrest:hamcrest-library:1.3'
    androidTestCompile('junit:junit:4.11') {
        exclude module: 'hamcrest-core'
    }
    androidTestCompile('org.robolectric:robolectric:2.3') {
        exclude module: 'classworlds'
        exclude module: 'maven-artifact'
        exclude module: 'maven-artifact-manager'
        exclude module: 'maven-error-diagnostics'
        exclude module: 'maven-model'
        exclude module: 'maven-plugin-registry'
        exclude module: 'maven-profile'
        exclude module: 'maven-project'
        exclude module: 'maven-settings'
        exclude module: 'nekohtml'
        exclude module: 'plexus-container-default'
        exclude module: 'plexus-interpolation'
        exclude module: 'plexus-utils'
        exclude module: 'wagon-file'
        exclude module: 'wagon-http-lightweight'
        exclude module: 'wagon-http-shared'
        exclude module: 'wagon-provider-api'
    }
    androidTestCompile 'com.squareup:fest-android:1.0.+'
//==================== Instrument Tests ==============
    androidTestCompile 'com.jayway.android.robotium:robotium-solo:4.3.+'
    androidTestCompile files('libs/the-missing-android-xml-junit-test-runner-release-1.3_2.jar')
}

if(project.hasProperty("jenkins")) {
    android.buildTypes.each { type ->
        //@Todo Commented out until robolectric issue#1150 is resolved
//        type.applicationIdSuffix = ".jenkins"
//        type.versionNameSuffix = "-jenkins-$type.name"
    }
}

apt {
    arguments {
        androidManifestFile variant.processResources.manifestFile
        resourcePackageName android.defaultConfig.applicationId
        // You can set optional annotation processing options here, like these commented options:
        // logLevel 'INFO'
        // logFile '/var/log/aa.log'
    }
}

task createFlashableZip(type: Zip) {
    from "build-files/flashable-zip"
    from("build/apk/three-headed-monkey-release-unsigned.apk") {
        into "system/app"
    }
    baseName "three-headed-monkey-release"
}


project.ext['src.java.dir'] = ['src/test/java']
project.ext['module.iml.file'] = "three-headed-monkey.iml"
apply from: 'https://raw.github.com/sababado/gradle-android-add-dir/master/gradle-android-add-dir.gradle'


//android.applicationVariants.all { variant ->
//    variant.addJavaSourceFoldersToModel file("src/test/java")
//}


//apply plugin: 'idea'
//
//idea {
//    module {
//        testSourceDirs += file('src/test/java')
//        testOutputDir = file('build/test-classes/debug')
//        jdkName = null
//    }
//}

